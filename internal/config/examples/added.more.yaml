# included file, define applications
applications:
  go:
    # git mode
    git:
      # any git repository that 'git' can reach
      repository: "https://github.com/golang/go"
      # work in tagged mode (use tags to determine releases)
      tagged:
        # provide a URL link for downloading (will use repository/upstream if not provided)
        # can use detected version (tag), GOOS and GOARCH (and application name from the map level) in template
        download: "https://go.dev/dl/{{ $.Vars.Tag }}.{{ $.OS }}-{{ $.Arch }}.tar.gz"
        # define regex filters to _filter out_ tags that are noise/not interesting
        filters: 
          - "refs/tags/weekly"
          - "refs/tags/release"
          - "[0-9]rc[0-9]"
    deploy:
      # deploy specific files from the bundle, like an executable (but support any list)
      # offset from build area (can also be templated)
      # this is an asset, it did not have any build steps
      artifacts:
        - files:
            - "bin/go"
          # where are the above files (sym)linked into, use '~/' to root from HOME
          destination: "~/bin"
  rg:
    # github mode
    github:
      # provide the project on github
      project: "BurntSushi/ripgrep"
      # release mode (uses github releases to detect version)
      release:
        # need to select the asset, can use $.Arch/$.OS (tag and name) to find the asset
        # only one asset can match
        asset: '{{ if eq $.Arch "amd64" }}x86_64{{ end }}-unknown-{{ $.OS }}-(.+?).tar.gz$'
    deploy:
      # again, deploy files appropriately
      artifacts:
        - files:
            - "rg"
          destination: "~/bin"
